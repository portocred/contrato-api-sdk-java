/*
 * Gestão de Contratos
 * API de Gestão de Contratos.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErroResponse;
import io.swagger.client.model.ExclusaoPagamentoResponse;
import io.swagger.client.model.GetContratosResponse;
import io.swagger.client.model.GetParcelasResponse;
import io.swagger.client.model.GetStatusContratoResponse;
import io.swagger.client.model.SolicitacaoPagamentoRequest;
import io.swagger.client.model.SolicitacaoPagamentoResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContratoApi {
    private ApiClient apiClient;

    public ContratoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContratoApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for contratosGet
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contratosGetCall(String clientId, String accessToken, String codigoLojista, String cpf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contratos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cpf != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cpf", cpf));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));
        if (codigoLojista != null)
        localVarHeaderParams.put("codigoLojista", apiClient.parameterToString(codigoLojista));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contratosGetValidateBeforeCall(String clientId, String accessToken, String codigoLojista, String cpf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling contratosGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling contratosGet(Async)");
        }
        
        // verify the required parameter 'codigoLojista' is set
        if (codigoLojista == null) {
            throw new ApiException("Missing the required parameter 'codigoLojista' when calling contratosGet(Async)");
        }
        
        // verify the required parameter 'cpf' is set
        if (cpf == null) {
            throw new ApiException("Missing the required parameter 'cpf' when calling contratosGet(Async)");
        }
        

        com.squareup.okhttp.Call call = contratosGetCall(clientId, accessToken, codigoLojista, cpf, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do CPF do cliente.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @return GetContratosResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetContratosResponse contratosGet(String clientId, String accessToken, String codigoLojista, String cpf) throws ApiException {
        ApiResponse<GetContratosResponse> resp = contratosGetWithHttpInfo(clientId, accessToken, codigoLojista, cpf);
        return resp.getData();
    }

    /**
     * 
     * Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do CPF do cliente.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @return ApiResponse&lt;GetContratosResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetContratosResponse> contratosGetWithHttpInfo(String clientId, String accessToken, String codigoLojista, String cpf) throws ApiException {
        com.squareup.okhttp.Call call = contratosGetValidateBeforeCall(clientId, accessToken, codigoLojista, cpf, null, null);
        Type localVarReturnType = new TypeToken<GetContratosResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do CPF do cliente.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contratosGetAsync(String clientId, String accessToken, String codigoLojista, String cpf, final ApiCallback<GetContratosResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contratosGetValidateBeforeCall(clientId, accessToken, codigoLojista, cpf, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetContratosResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contratosIdCancelamentoPut
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param id O número do contrado a ser cancelado. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @param operador Código do operador. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contratosIdCancelamentoPutCall(String clientId, String accessToken, String id, byte[] xAuthorization, String codigoLojista, String cpf, String operador, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contratos/{id}/cancelamento"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));
        if (xAuthorization != null)
        localVarHeaderParams.put("x-authorization", apiClient.parameterToString(xAuthorization));
        if (codigoLojista != null)
        localVarHeaderParams.put("codigoLojista", apiClient.parameterToString(codigoLojista));
        if (cpf != null)
        localVarHeaderParams.put("cpf", apiClient.parameterToString(cpf));
        if (operador != null)
        localVarHeaderParams.put("operador", apiClient.parameterToString(operador));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contratosIdCancelamentoPutValidateBeforeCall(String clientId, String accessToken, String id, byte[] xAuthorization, String codigoLojista, String cpf, String operador, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling contratosIdCancelamentoPut(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling contratosIdCancelamentoPut(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling contratosIdCancelamentoPut(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling contratosIdCancelamentoPut(Async)");
        }
        
        // verify the required parameter 'codigoLojista' is set
        if (codigoLojista == null) {
            throw new ApiException("Missing the required parameter 'codigoLojista' when calling contratosIdCancelamentoPut(Async)");
        }
        
        // verify the required parameter 'cpf' is set
        if (cpf == null) {
            throw new ApiException("Missing the required parameter 'cpf' when calling contratosIdCancelamentoPut(Async)");
        }
        
        // verify the required parameter 'operador' is set
        if (operador == null) {
            throw new ApiException("Missing the required parameter 'operador' when calling contratosIdCancelamentoPut(Async)");
        }
        

        com.squareup.okhttp.Call call = contratosIdCancelamentoPutCall(clientId, accessToken, id, xAuthorization, codigoLojista, cpf, operador, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Esta funcionalidade tem como objetivo cancelar um contrato no periódo D0 a D7 de um determinado cliente.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param id O número do contrado a ser cancelado. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @param operador Código do operador. (required)
     * @return ExclusaoPagamentoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExclusaoPagamentoResponse contratosIdCancelamentoPut(String clientId, String accessToken, String id, byte[] xAuthorization, String codigoLojista, String cpf, String operador) throws ApiException {
        ApiResponse<ExclusaoPagamentoResponse> resp = contratosIdCancelamentoPutWithHttpInfo(clientId, accessToken, id, xAuthorization, codigoLojista, cpf, operador);
        return resp.getData();
    }

    /**
     * 
     * Esta funcionalidade tem como objetivo cancelar um contrato no periódo D0 a D7 de um determinado cliente.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param id O número do contrado a ser cancelado. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @param operador Código do operador. (required)
     * @return ApiResponse&lt;ExclusaoPagamentoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExclusaoPagamentoResponse> contratosIdCancelamentoPutWithHttpInfo(String clientId, String accessToken, String id, byte[] xAuthorization, String codigoLojista, String cpf, String operador) throws ApiException {
        com.squareup.okhttp.Call call = contratosIdCancelamentoPutValidateBeforeCall(clientId, accessToken, id, xAuthorization, codigoLojista, cpf, operador, null, null);
        Type localVarReturnType = new TypeToken<ExclusaoPagamentoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Esta funcionalidade tem como objetivo cancelar um contrato no periódo D0 a D7 de um determinado cliente.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param id O número do contrado a ser cancelado. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @param operador Código do operador. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contratosIdCancelamentoPutAsync(String clientId, String accessToken, String id, byte[] xAuthorization, String codigoLojista, String cpf, String operador, final ApiCallback<ExclusaoPagamentoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contratosIdCancelamentoPutValidateBeforeCall(clientId, accessToken, id, xAuthorization, codigoLojista, cpf, operador, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExclusaoPagamentoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contratosIdExclusaoPagamentoDelete
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param id O número do contrado a ser cancelado. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @param operador Código do operador. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contratosIdExclusaoPagamentoDeleteCall(String clientId, String accessToken, String id, byte[] xAuthorization, String codigoLojista, String cpf, String operador, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contratos/{id}/exclusao-pagamento"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));
        if (xAuthorization != null)
        localVarHeaderParams.put("x-authorization", apiClient.parameterToString(xAuthorization));
        if (codigoLojista != null)
        localVarHeaderParams.put("codigoLojista", apiClient.parameterToString(codigoLojista));
        if (cpf != null)
        localVarHeaderParams.put("cpf", apiClient.parameterToString(cpf));
        if (operador != null)
        localVarHeaderParams.put("operador", apiClient.parameterToString(operador));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contratosIdExclusaoPagamentoDeleteValidateBeforeCall(String clientId, String accessToken, String id, byte[] xAuthorization, String codigoLojista, String cpf, String operador, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling contratosIdExclusaoPagamentoDelete(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling contratosIdExclusaoPagamentoDelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling contratosIdExclusaoPagamentoDelete(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling contratosIdExclusaoPagamentoDelete(Async)");
        }
        
        // verify the required parameter 'codigoLojista' is set
        if (codigoLojista == null) {
            throw new ApiException("Missing the required parameter 'codigoLojista' when calling contratosIdExclusaoPagamentoDelete(Async)");
        }
        
        // verify the required parameter 'cpf' is set
        if (cpf == null) {
            throw new ApiException("Missing the required parameter 'cpf' when calling contratosIdExclusaoPagamentoDelete(Async)");
        }
        
        // verify the required parameter 'operador' is set
        if (operador == null) {
            throw new ApiException("Missing the required parameter 'operador' when calling contratosIdExclusaoPagamentoDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = contratosIdExclusaoPagamentoDeleteCall(clientId, accessToken, id, xAuthorization, codigoLojista, cpf, operador, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Permitir a exclusão, apenas em D0, do pagamento mais recente de um contrato. É importante observar que um pagamento pode englobar uma ou várias parcelas.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param id O número do contrado a ser cancelado. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @param operador Código do operador. (required)
     * @return ExclusaoPagamentoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExclusaoPagamentoResponse contratosIdExclusaoPagamentoDelete(String clientId, String accessToken, String id, byte[] xAuthorization, String codigoLojista, String cpf, String operador) throws ApiException {
        ApiResponse<ExclusaoPagamentoResponse> resp = contratosIdExclusaoPagamentoDeleteWithHttpInfo(clientId, accessToken, id, xAuthorization, codigoLojista, cpf, operador);
        return resp.getData();
    }

    /**
     * 
     * Permitir a exclusão, apenas em D0, do pagamento mais recente de um contrato. É importante observar que um pagamento pode englobar uma ou várias parcelas.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param id O número do contrado a ser cancelado. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @param operador Código do operador. (required)
     * @return ApiResponse&lt;ExclusaoPagamentoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExclusaoPagamentoResponse> contratosIdExclusaoPagamentoDeleteWithHttpInfo(String clientId, String accessToken, String id, byte[] xAuthorization, String codigoLojista, String cpf, String operador) throws ApiException {
        com.squareup.okhttp.Call call = contratosIdExclusaoPagamentoDeleteValidateBeforeCall(clientId, accessToken, id, xAuthorization, codigoLojista, cpf, operador, null, null);
        Type localVarReturnType = new TypeToken<ExclusaoPagamentoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Permitir a exclusão, apenas em D0, do pagamento mais recente de um contrato. É importante observar que um pagamento pode englobar uma ou várias parcelas.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param id O número do contrado a ser cancelado. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @param operador Código do operador. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contratosIdExclusaoPagamentoDeleteAsync(String clientId, String accessToken, String id, byte[] xAuthorization, String codigoLojista, String cpf, String operador, final ApiCallback<ExclusaoPagamentoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contratosIdExclusaoPagamentoDeleteValidateBeforeCall(clientId, accessToken, id, xAuthorization, codigoLojista, cpf, operador, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExclusaoPagamentoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contratosIdGet
     * @param id Identificador do contrato. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contratosIdGetCall(String id, String clientId, String accessToken, String codigoLojista, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contratos/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));
        if (codigoLojista != null)
        localVarHeaderParams.put("codigoLojista", apiClient.parameterToString(codigoLojista));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contratosIdGetValidateBeforeCall(String id, String clientId, String accessToken, String codigoLojista, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling contratosIdGet(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling contratosIdGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling contratosIdGet(Async)");
        }
        
        // verify the required parameter 'codigoLojista' is set
        if (codigoLojista == null) {
            throw new ApiException("Missing the required parameter 'codigoLojista' when calling contratosIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = contratosIdGetCall(id, clientId, accessToken, codigoLojista, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do código do contrato.
     * @param id Identificador do contrato. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @return GetContratosResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetContratosResponse contratosIdGet(String id, String clientId, String accessToken, String codigoLojista) throws ApiException {
        ApiResponse<GetContratosResponse> resp = contratosIdGetWithHttpInfo(id, clientId, accessToken, codigoLojista);
        return resp.getData();
    }

    /**
     * 
     * Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do código do contrato.
     * @param id Identificador do contrato. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @return ApiResponse&lt;GetContratosResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetContratosResponse> contratosIdGetWithHttpInfo(String id, String clientId, String accessToken, String codigoLojista) throws ApiException {
        com.squareup.okhttp.Call call = contratosIdGetValidateBeforeCall(id, clientId, accessToken, codigoLojista, null, null);
        Type localVarReturnType = new TypeToken<GetContratosResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do código do contrato.
     * @param id Identificador do contrato. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contratosIdGetAsync(String id, String clientId, String accessToken, String codigoLojista, final ApiCallback<GetContratosResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contratosIdGetValidateBeforeCall(id, clientId, accessToken, codigoLojista, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetContratosResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contratosIdSolicitacaoPagamentosPost
     * @param id Identificador do contrato. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param solicitacaoPagamento Informações sobre o pagamento a ser realizado em um contrato. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contratosIdSolicitacaoPagamentosPostCall(String id, String clientId, String accessToken, SolicitacaoPagamentoRequest solicitacaoPagamento, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = solicitacaoPagamento;

        // create path and map variables
        String localVarPath = "/contratos/{id}/solicitacao-pagamentos"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contratosIdSolicitacaoPagamentosPostValidateBeforeCall(String id, String clientId, String accessToken, SolicitacaoPagamentoRequest solicitacaoPagamento, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling contratosIdSolicitacaoPagamentosPost(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling contratosIdSolicitacaoPagamentosPost(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling contratosIdSolicitacaoPagamentosPost(Async)");
        }
        
        // verify the required parameter 'solicitacaoPagamento' is set
        if (solicitacaoPagamento == null) {
            throw new ApiException("Missing the required parameter 'solicitacaoPagamento' when calling contratosIdSolicitacaoPagamentosPost(Async)");
        }
        

        com.squareup.okhttp.Call call = contratosIdSolicitacaoPagamentosPostCall(id, clientId, accessToken, solicitacaoPagamento, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Esta funcionalidade tem como objetivo realizar uma solicitação de pagamento de parcelas em aberto de determinado contrato. Como resultado da solicitação, são retornadas as informações das parcelas que foram pagas.
     * @param id Identificador do contrato. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param solicitacaoPagamento Informações sobre o pagamento a ser realizado em um contrato. (required)
     * @return SolicitacaoPagamentoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SolicitacaoPagamentoResponse contratosIdSolicitacaoPagamentosPost(String id, String clientId, String accessToken, SolicitacaoPagamentoRequest solicitacaoPagamento) throws ApiException {
        ApiResponse<SolicitacaoPagamentoResponse> resp = contratosIdSolicitacaoPagamentosPostWithHttpInfo(id, clientId, accessToken, solicitacaoPagamento);
        return resp.getData();
    }

    /**
     * 
     * Esta funcionalidade tem como objetivo realizar uma solicitação de pagamento de parcelas em aberto de determinado contrato. Como resultado da solicitação, são retornadas as informações das parcelas que foram pagas.
     * @param id Identificador do contrato. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param solicitacaoPagamento Informações sobre o pagamento a ser realizado em um contrato. (required)
     * @return ApiResponse&lt;SolicitacaoPagamentoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SolicitacaoPagamentoResponse> contratosIdSolicitacaoPagamentosPostWithHttpInfo(String id, String clientId, String accessToken, SolicitacaoPagamentoRequest solicitacaoPagamento) throws ApiException {
        com.squareup.okhttp.Call call = contratosIdSolicitacaoPagamentosPostValidateBeforeCall(id, clientId, accessToken, solicitacaoPagamento, null, null);
        Type localVarReturnType = new TypeToken<SolicitacaoPagamentoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Esta funcionalidade tem como objetivo realizar uma solicitação de pagamento de parcelas em aberto de determinado contrato. Como resultado da solicitação, são retornadas as informações das parcelas que foram pagas.
     * @param id Identificador do contrato. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param solicitacaoPagamento Informações sobre o pagamento a ser realizado em um contrato. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contratosIdSolicitacaoPagamentosPostAsync(String id, String clientId, String accessToken, SolicitacaoPagamentoRequest solicitacaoPagamento, final ApiCallback<SolicitacaoPagamentoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contratosIdSolicitacaoPagamentosPostValidateBeforeCall(id, clientId, accessToken, solicitacaoPagamento, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SolicitacaoPagamentoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contratosParcelasGet
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @param dataInicio Data de início da busca. Limitada a 90 dias anteriores à data de movimento atual. (Formato yyyy-MM-dd) (required)
     * @param dataFim Data de fim da busca. Pode variar entre a data de movimento atual e os 90 dias que a antecedem. (Formato yyyy-MM-dd) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contratosParcelasGetCall(String clientId, String accessToken, String codigoLojista, String cpf, String dataInicio, String dataFim, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contratos/parcelas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cpf != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cpf", cpf));
        if (dataInicio != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataInicio", dataInicio));
        if (dataFim != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataFim", dataFim));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));
        if (codigoLojista != null)
        localVarHeaderParams.put("codigoLojista", apiClient.parameterToString(codigoLojista));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contratosParcelasGetValidateBeforeCall(String clientId, String accessToken, String codigoLojista, String cpf, String dataInicio, String dataFim, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling contratosParcelasGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling contratosParcelasGet(Async)");
        }
        
        // verify the required parameter 'codigoLojista' is set
        if (codigoLojista == null) {
            throw new ApiException("Missing the required parameter 'codigoLojista' when calling contratosParcelasGet(Async)");
        }
        
        // verify the required parameter 'cpf' is set
        if (cpf == null) {
            throw new ApiException("Missing the required parameter 'cpf' when calling contratosParcelasGet(Async)");
        }
        
        // verify the required parameter 'dataInicio' is set
        if (dataInicio == null) {
            throw new ApiException("Missing the required parameter 'dataInicio' when calling contratosParcelasGet(Async)");
        }
        
        // verify the required parameter 'dataFim' is set
        if (dataFim == null) {
            throw new ApiException("Missing the required parameter 'dataFim' when calling contratosParcelasGet(Async)");
        }
        

        com.squareup.okhttp.Call call = contratosParcelasGetCall(clientId, accessToken, codigoLojista, cpf, dataInicio, dataFim, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Esta funcionalidade tem como objetivo recuperar as informações de parcelas pagas sobre um contrato vinculado a um determinado cliente, dentro de um período.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @param dataInicio Data de início da busca. Limitada a 90 dias anteriores à data de movimento atual. (Formato yyyy-MM-dd) (required)
     * @param dataFim Data de fim da busca. Pode variar entre a data de movimento atual e os 90 dias que a antecedem. (Formato yyyy-MM-dd) (required)
     * @return GetParcelasResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetParcelasResponse contratosParcelasGet(String clientId, String accessToken, String codigoLojista, String cpf, String dataInicio, String dataFim) throws ApiException {
        ApiResponse<GetParcelasResponse> resp = contratosParcelasGetWithHttpInfo(clientId, accessToken, codigoLojista, cpf, dataInicio, dataFim);
        return resp.getData();
    }

    /**
     * 
     * Esta funcionalidade tem como objetivo recuperar as informações de parcelas pagas sobre um contrato vinculado a um determinado cliente, dentro de um período.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @param dataInicio Data de início da busca. Limitada a 90 dias anteriores à data de movimento atual. (Formato yyyy-MM-dd) (required)
     * @param dataFim Data de fim da busca. Pode variar entre a data de movimento atual e os 90 dias que a antecedem. (Formato yyyy-MM-dd) (required)
     * @return ApiResponse&lt;GetParcelasResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetParcelasResponse> contratosParcelasGetWithHttpInfo(String clientId, String accessToken, String codigoLojista, String cpf, String dataInicio, String dataFim) throws ApiException {
        com.squareup.okhttp.Call call = contratosParcelasGetValidateBeforeCall(clientId, accessToken, codigoLojista, cpf, dataInicio, dataFim, null, null);
        Type localVarReturnType = new TypeToken<GetParcelasResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Esta funcionalidade tem como objetivo recuperar as informações de parcelas pagas sobre um contrato vinculado a um determinado cliente, dentro de um período.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @param dataInicio Data de início da busca. Limitada a 90 dias anteriores à data de movimento atual. (Formato yyyy-MM-dd) (required)
     * @param dataFim Data de fim da busca. Pode variar entre a data de movimento atual e os 90 dias que a antecedem. (Formato yyyy-MM-dd) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contratosParcelasGetAsync(String clientId, String accessToken, String codigoLojista, String cpf, String dataInicio, String dataFim, final ApiCallback<GetParcelasResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contratosParcelasGetValidateBeforeCall(clientId, accessToken, codigoLojista, cpf, dataInicio, dataFim, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetParcelasResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contratosStatusGet
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contratosStatusGetCall(String clientId, String accessToken, String cpf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contratos/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cpf != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cpf", cpf));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contratosStatusGetValidateBeforeCall(String clientId, String accessToken, String cpf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling contratosStatusGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling contratosStatusGet(Async)");
        }
        
        // verify the required parameter 'cpf' is set
        if (cpf == null) {
            throw new ApiException("Missing the required parameter 'cpf' when calling contratosStatusGet(Async)");
        }
        

        com.squareup.okhttp.Call call = contratosStatusGetCall(clientId, accessToken, cpf, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Esta funcionalidade tem como objetivo recuperar as informações de status de um contrato vinculado a um determinado cliente.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @return GetStatusContratoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetStatusContratoResponse contratosStatusGet(String clientId, String accessToken, String cpf) throws ApiException {
        ApiResponse<GetStatusContratoResponse> resp = contratosStatusGetWithHttpInfo(clientId, accessToken, cpf);
        return resp.getData();
    }

    /**
     * 
     * Esta funcionalidade tem como objetivo recuperar as informações de status de um contrato vinculado a um determinado cliente.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @return ApiResponse&lt;GetStatusContratoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetStatusContratoResponse> contratosStatusGetWithHttpInfo(String clientId, String accessToken, String cpf) throws ApiException {
        com.squareup.okhttp.Call call = contratosStatusGetValidateBeforeCall(clientId, accessToken, cpf, null, null);
        Type localVarReturnType = new TypeToken<GetStatusContratoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Esta funcionalidade tem como objetivo recuperar as informações de status de um contrato vinculado a um determinado cliente.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param cpf Cpf do cliente que possui o contrato. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contratosStatusGetAsync(String clientId, String accessToken, String cpf, final ApiCallback<GetStatusContratoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contratosStatusGetValidateBeforeCall(clientId, accessToken, cpf, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetStatusContratoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
